#! /usr/bin/env python3

from argparse import ArgumentParser
from IPython import embed
from pathlib import Path
from tempfile import TemporaryDirectory

import os
import shlex
import subprocess
import sys

def get_linker_strings():
    # iangneal: inserted by CMAKE
    pmtest_library = Path(r'${PMTEST_LIBS}')
    
    if not pmtest_library.exists():
        raise Exception(r'Path ${PMTEST_LIBS} does not exist!')

    pmtest = str(pmtest_library.absolute())
    return f'-L{pmtest} -Wl,-rpath={pmtest} -lpmtest -lpthread'

def run_pass_and_compile(bitcode_file, bug_report, output_file, keep_files):
    # iangneal: inserted by CMAKE
    pass_library = Path(r'${LLVM_PASS_PATH}')

    if not pass_library.exists():
        raise Exception(r'Path ${LLVM_PASS_PATH} does not exist!')

    if 'LLVM_COMPILER_PATH' not in os.environ:
        raise Exception('Please export "LLVM_COMPILER_PATH", as you would for wllvm')
    
    llvm_path = Path(os.environ['LLVM_COMPILER_PATH']).absolute()
    if not llvm_path.exists():
        raise Exception(f'LLVM_COMPILER_PATH="{str(llvm_path)}"" does not exist!')

    # Do some setup before we create the temporary directory
    # 1. opt to run the fixer
    opt_exe = llvm_path / 'opt'
    assert(opt_exe.exists())

    opt_arg_str = (f'{str(opt_exe)} -load {str(pass_library)} -pm-bug-fixer '
                   f' -trace-file {str(bug_report)} {str(bitcode_file)}')
    
    # 2. llc to compile the optimized bitcode
    llc_exe = llvm_path / 'llc'
    assert(llc_exe.exists())

    llc_arg_str_fn = lambda bc: f'{str(llc_exe)} {str(bc)}'

    # 3. clang to compile the assembly file and link libraries.
    clang_exe = llvm_path / 'clang'
    assert(clang_exe.exists())

    clang_arg_str_fn = lambda asm: f'{str(clang_exe)} {str(asm)} {get_linker_strings()} -o {str(output_file)}'
    
    with TemporaryDirectory() as tempdir:
        temppath = Path(tempdir)
        assert(temppath.exists())
        bitcode_opt = temppath / 'fixed.bc' 
        ret = subprocess.run(shlex.split(opt_arg_str), stdout=bitcode_opt.open('w'))
        ret.check_returncode()
        
        ret = subprocess.run(shlex.split(llc_arg_str_fn(bitcode_opt)))
        ret.check_returncode()
        asm_path = temppath / 'fixed.s'
        assert(asm_path.exists())

        ret = subprocess.run(shlex.split(clang_arg_str_fn(asm_path)))
        ret.check_returncode()
        assert(output_file.exists())

def main(): 
    parser = ArgumentParser(description='Apply the pm-bug-fixer LLVM pass to a given binary.')

    parser.add_argument('bitcode_file', type=Path, help='The bitcode of the program that needs to be fixed')
    parser.add_argument('bug_report', type=Path, help='The bug report, as generated by parse-trace')
    parser.add_argument('--output-file', '-o', type=Path, default=Path('a.out'), 
                        help='Optional output of where to put the compiled binary.')
    parser.add_argument('--keep-files', '-k', action='store_true', default=False,
                        help='Doesn\'t delete temporary files. Helpful for debugging.')

    args = parser.parse_args()

    if args.keep_files:
        raise Exception('--keep-files is not yet supported!')

    run_pass_and_compile(args.bitcode_file, args.bug_report, args.output_file, args.keep_files)


if __name__ == '__main__':
    main()